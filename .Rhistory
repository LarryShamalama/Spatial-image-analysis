else if (25 <= age && age <= 29){
return (1)
}
else if (30 <= age && age <= 34){
return (2)
}
else if (35 <= age && age <= 39){
return (3)
}
else if (40 <= age && age <= 44){
return (4)
}
else if (45 <= age && age <= 49){
return (5)
}
else{
return (6)
}
}
new.ages.1 <- unlist(t(lapply(ages.1, standardize.age)))
new.ages.2 <- unlist(t(lapply(ages.2, standardize.age)))
new.ages   <- c(new.ages.1, new.ages.2)
new.log.regr <- glm(team ~ new.ages, family = binomial())
coefs <- as.vector(coef(new.log.regr))
compute.score <- function(age){
return (1/(exp(coefs[1] + coefs[2]*transform(age)))/(exp(coefs[1] + coefs[2]*transform(age)) + 1))
}
stand.ages <- standardize.age(seq(20, 54))
plot(seq(20, 54),
unlist(t(lapply(stand.ages, compute.score))),
type='p',
lty=16,
main='Ages vs. Estimated weights via direct standardization (discretization)',
xlab='Age',
ylab='Weights')
lines(seq(20, 54), compute.score(seq(20, 54)))
unlist(t(lapply(stand.ages, compute.score)))
lapply(stand.ages, compute.score)
stand.ages
standardize.age <- function(age){
if (20 <= age && age <= 24){
return (0)
}
else if (25 <= age && age <= 29){
return (1)
}
else if (30 <= age && age <= 34){
return (2)
}
else if (35 <= age && age <= 39){
return (3)
}
else if (40 <= age && age <= 44){
return (4)
}
else if (45 <= age && age <= 49){
return (5)
}
else{
return (6)
}
}
new.ages.1 <- unlist(t(lapply(ages.1, standardize.age)))
new.ages.2 <- unlist(t(lapply(ages.2, standardize.age)))
new.ages   <- c(new.ages.1, new.ages.2)
new.log.regr <- glm(team ~ new.ages, family = binomial())
coefs <- as.vector(coef(new.log.regr))
compute.score <- function(age){
return (1/(exp(coefs[1] + coefs[2]*transform(age)))/(exp(coefs[1] + coefs[2]*transform(age)) + 1))
}
stand.ages <- unlist(t(lapply(seq(20, 54), standardize.age)))
plot(seq(20, 54),
unlist(t(lapply(stand.ages, compute.score))),
type='p',
lty=16,
main='Ages vs. Estimated weights via direct standardization (discretization)',
xlab='Age',
ylab='Weights')
lines(seq(20, 54), compute.score(seq(20, 54)))
stand.ages
standardize.age <- function(age){
if (20 <= age && age <= 24){
return (0)
}
else if (25 <= age && age <= 29){
return (1)
}
else if (30 <= age && age <= 34){
return (2)
}
else if (35 <= age && age <= 39){
return (3)
}
else if (40 <= age && age <= 44){
return (4)
}
else if (45 <= age && age <= 49){
return (5)
}
else{
return (6)
}
}
new.ages.1 <- unlist(t(lapply(ages.1, standardize.age)))
new.ages.2 <- unlist(t(lapply(ages.2, standardize.age)))
new.ages   <- c(new.ages.1, new.ages.2)
new.log.regr <- glm(team ~ new.ages, family = binomial())
coefs <- as.vector(coef(new.log.regr))
compute.score <- function(age){
return (1/(exp(coefs[1] + coefs[2]*transform(age)))/(exp(coefs[1] + coefs[2]*transform(age)) + 1))
}
stand.ages <- unlist(t(lapply(seq(20, 54), standardize.age)))
plot(seq(20, 54),
unlist(t(lapply(stand.ages, compute.score))),
type='p',
lty=16,
main='Ages vs. Estimated weights via\ndirect standardization (discretization)',
xlab='Age',
ylab='Weights')
lines(seq(20, 54), compute.score(seq(20, 54)))
standardize.age <- function(age){
if (20 <= age && age <= 24){
return (0)
}
else if (25 <= age && age <= 29){
return (1)
}
else if (30 <= age && age <= 34){
return (2)
}
else if (35 <= age && age <= 39){
return (3)
}
else if (40 <= age && age <= 44){
return (4)
}
else if (45 <= age && age <= 49){
return (5)
}
else{
return (6)
}
}
new.ages.1 <- unlist(t(lapply(ages.1, standardize.age)))
new.ages.2 <- unlist(t(lapply(ages.2, standardize.age)))
new.ages   <- c(new.ages.1, new.ages.2)
new.log.regr <- glm(team ~ new.ages, family = binomial())
coefs <- as.vector(coef(new.log.regr))
compute.score <- function(age){
return (1/(exp(coefs[1] + coefs[2]*transform(age)))/(exp(coefs[1] + coefs[2]*transform(age)) + 1))
}
stand.ages <- unlist(t(lapply(seq(20, 54), standardize.age)))
plot(seq(20, 54),
unlist(t(lapply(stand.ages, compute.score))),
type='p',
lty=16,
main='Ages vs. Estimated weights via\ndirect standardization (discretization)',
xlab='Age',
ylab='Weights')
compute.score(20), compute.score(24), compute.score(25), compute.score(42)
c(compute.score(20), compute.score(24), compute.score(25), compute.score(42))
unlist(t(c(compute.score(20), compute.score(24), compute.score(25), compute.score(42))))
unlist(t(1/c(compute.score(20), compute.score(24), compute.score(25), compute.score(42))))
unlist(t(1/c(compute.score(20), compute.score(24), compute.score(25), compute.score(42))))
unlist(t(lapply(c(20, 24, 25, 40), standardize.age)))
unlist(t(lapply(test.ages, compute.score)))
test.ages <- unlist(t(lapply(c(20, 24, 25, 40), standardize.age)))
unlist(t(lapply(test.ages, compute.score)))
rgamma
?dgamma
library(spdep)
library(maptools)
library(rstan)
library(sp)
library(RColorBrewer)
library(classInt)
options(mc.cores = parallel::detectCores())
#shapefile of Rio de Janeiro
shape_rj=readShapePoly('DataShapeRJ')
plot(shape_rj)
#plotting the distribution of HDI across the city
colors <- brewer.pal(9, "YlOrRd") #set breaks for the 9 colors
options(mc.cores = parallel::detectCores())
#shapefile of Rio de Janeiro
shape_rj=readShapePoly('DataShapeRJ')
plot(shape_rj)
j
mean.1977
gc()
.rs.restartR()
rm(list=ls())
ls
rm(list=ls())
exo(0.603)
exp(0.603)
rm(list=ls())
setwd('~/Documents/GitHub/Spatial-image-analysis/')
library(fields,quietly=TRUE)
colfunc <- colorRampPalette(c("blue","lightblue","white","yellow","orange","red"))
library(CARBayes)
library(spdep)
source('lib/helper.R')
adj.matrix <- create.adj.matrix(28, 28)
handwritten.digit <- read.csv('images/flatten_handwritten_digit.csv', header=FALSE)
handwritten.digit <- t(handwritten.digit)[1,]
handwritten.digit <- expit(handwritten.digit)
fit.12 <- S.CARleroux(handwritten.digit ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
#####################
### BREAST CANCER ###
#####################
benign <- read.csv('images/benign.csv', header=FALSE)
x.dim.benign <- dim(benign)[1]
y.dim.benign <- dim(benign)[2]
adj.matrix.benign <- create.adj.matrix(x.dim.benign, y.dim.benign)
benign <- as.numeric(as.matrix(benign))
fit.benign <- S.CARleroux(expit(pad(benign) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
)
benign
fit.benign <- S.CARleroux(expit(pad(benign)) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
length(benign)
fit.benign <- S.CARleroux(expit(pad(benign)) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix.benign,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
dim(adj.matrix.benign)
benign <- read.csv('images/benign.csv', header=FALSE)
x.dim.benign <- dim(benign)[1]
y.dim.benign <- dim(benign)[2]
adj.matrix.benign <- create.adj.matrix(x.dim.benign, y.dim.benign)
benign <- as.numeric(as.matrix(benign))
fit.benign <- S.CARleroux(expit(pad(benign)) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix.benign,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
expit(pad(benign))
fit.benign <- S.CARleroux(expit(pad(benign, 1e-4)) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix.benign,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
expit(pad(benign, 1e-4))
length(expit(pad(benign, 1e-4)))
pad(benign, 1e-4)
source('lib/helper.R')
fit.benign <- S.CARleroux(expit(pad(benign, 1e-4)) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix.benign,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
all.digits <- read.csv('images/all_digits.csv', header=FALSE)
parameter.means <- matrix(0, nrow=10, ncol=10)
adj.matrix <- create.adj.matrix(28, 28)
for (i in 1:100){
temp.fit <- S.CARleroux(expit(as.numeric(all.digits[i,])) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
}
i
temp.fit
temp.fit$samples$nu2
parameter.means <- array(0, c(100, 1, 3))
parameter.means <- matrix(0, nrow=100, ncol=3)
mean(temp.fit$samples$nu2)
c(mean(temp.fit$samples$nu2), mean(temp.fit$samples$beta), mean(temp.fit$samples$tau2))
beta.mean <- mean(temp.fit$samples$beta)
beta.mean
adj.matrix <- create.adj.matrix(28, 28)
all.digits <- read.csv('images/all_digits.csv', header=FALSE)
parameter.means <- matrix(0, nrow=100, ncol=3)
for (i in 1:100){
temp.fit <- S.CARleroux(expit(as.numeric(all.digits[i,])) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
beta.mean <- mean(temp.fit$samples$beta)
tau2.mean <- mean(temp.fit$samples$tau2)
sigma2.mean <- mean(temp.fit$samples$sigma2)
}
parameter.means
source('lib/helper.R')
adj.matrix <- create.adj.matrix(28, 28)
adj.matrix <- create.adj.matrix(28, 28)
all.digits <- read.csv('images/all_digits.csv', header=FALSE)
parameter.means <- matrix(0, nrow=100, ncol=3)
for (i in 1:100){
temp.fit <- S.CARleroux(expit(as.numeric(all.digits[i,])) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
beta.mean <- mean(temp.fit$samples$beta)
tau2.mean <- mean(temp.fit$samples$tau2)
sigma2.mean <- mean(temp.fit$samples$sigma2)
parameter.means[i,] <- c(beta.mean,
tau2.mean,
sigma2.mean)
}
warnings()
temp.fit$samples$beta
mean(temp.fit$samples$beta)
beta.mea
beta.mean
tau.mean
tau2.mean
sigma2.mean
source('lib/helper.R')
adj.matrix <- create.adj.matrix(28, 28)
handwritten.digit <- read.csv('images/flatten_handwritten_digit.csv', header=FALSE)
handwritten.digit <- t(handwritten.digit)[1,]
handwritten.digit <- expit(handwritten.digit)
fit.12 <- S.CARleroux(handwritten.digit ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
adj.matrix <- create.adj.matrix(28, 28)
all.digits <- read.csv('images/all_digits.csv', header=FALSE)
parameter.means <- matrix(0, nrow=100, ncol=3)
for (i in 1:100){
temp.fit <- S.CARleroux(expit(as.numeric(all.digits[i,])) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
beta.mean <- mean(temp.fit$samples$beta)
tau2.mean <- mean(temp.fit$samples$tau2)
nu2.mean  <- mean(temp.fit$samples$nu2)
parameter.means[i,] <- c(beta.mean,
tau2.mean,
sigma2.mean)
}
parameter.means[c(1, 2, 3),]
i <- 1
temp.fit <- S.CARleroux(expit(as.numeric(all.digits[i,])) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
beta.mean <- mean(temp.fit$samples$beta)
tau2.mean <- mean(temp.fit$samples$tau2)
nu2.mean  <- mean(temp.fit$samples$nu2)
parameter.means[i,] <- c(beta.mean,
tau2.mean,
sigma2.mean)
nu2.mean
rm(list=ls())
setwd('~/Documents/GitHub/Spatial-image-analysis/')
library(fields,quietly=TRUE)
colfunc <- colorRampPalette(c("blue","lightblue","white","yellow","orange","red"))
library(CARBayes)
library(spdep)
source('lib/helper.R')
adj.matrix <- create.adj.matrix(28, 28)
handwritten.digit <- read.csv('images/flatten_handwritten_digit.csv', header=FALSE)
handwritten.digit <- t(handwritten.digit)[1,]
handwritten.digit <- expit(handwritten.digit)
fit.12 <- S.CARleroux(handwritten.digit ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
#####################
### BREAST CANCER ###
#####################
# still takes way too long
# even though picture was scaled to 5% of its normal resolution
benign <- read.csv('images/benign.csv', header=FALSE)
x.dim.benign <- dim(benign)[1]
y.dim.benign <- dim(benign)[2]
adj.matrix.benign <- create.adj.matrix(x.dim.benign, y.dim.benign)
benign <- as.numeric(as.matrix(benign))
fit.benign <- S.CARleroux(expit(pad(benign, 1e-4)) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix.benign,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
#####################
##### EXTENSION #####
#####################
adj.matrix <- create.adj.matrix(28, 28)
all.digits <- read.csv('images/all_digits.csv', header=FALSE)
parameter.means <- matrix(0, nrow=100, ncol=3)
for (i in 1:100){
temp.fit <- S.CARleroux(expit(as.numeric(all.digits[i,])) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
beta.mean <- mean(temp.fit$samples$beta)
tau2.mean <- mean(temp.fit$samples$tau2)
nu2.mean  <- mean(temp.fit$samples$nu2)
parameter.means[i,] <- c(beta.mean,
tau2.mean,
sigma2.mean)
adj.matrix <- create.adj.matrix(28, 28)
all.digits <- read.csv('images/all_digits.csv', header=FALSE)
parameter.means <- matrix(0, nrow=100, ncol=3)
for (i in 1:2){
temp.fit <- S.CARleroux(expit(as.numeric(all.digits[i,])) ~ 1,
family='gaussian',
burnin=1000,
prior.mean.beta=c(0),
prior.var.beta=c(25),
W=adj.matrix,
prior.nu2=c(1, 0.01),
prior.tau2=c(1, 0.01),
rho=1, # no hetero effect
n.sample=11000)
beta.mean <- mean(temp.fit$samples$beta)
tau2.mean <- mean(temp.fit$samples$tau2)
nu2.mean  <- mean(temp.fit$samples$nu2)
parameter.means[i,] <- c(beta.mean,
tau2.mean,
sigma2.mean)
}
